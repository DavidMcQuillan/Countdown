{"version":3,"sources":["../webpack/bootstrap 1fc61174a601434ec92f","LettersWorker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","bestWords","numResults","self","onmessage","e","msg","data","letters","fetch","toLowerCase","_a","sent","json","allWords","JSON","parse","body","all","useWords","length","slice","map","w","toUpperCase","findWords","postMessage"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAhB,GACA,IAAAS,EAAAT,KAAAiB,WACA,WAA2B,OAAAjB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAQ,EAAAC,GAAsD,OAAAR,OAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDtB,EAAAyB,EAAA,IAGAzB,IAAA0B,EAAA,m1CCxDA,IAAIC,GAAuB,SAAU,YAC/BC,EAAa,EAWnBC,KAAKC,UAAY,SAAAC,GACb,IAlBuBC,EAkBjBC,EAAOF,EAAEE,KAEC,cAAZA,EAAK,GAZb,SAAyBC,8FACJ,SAAMC,MAAM,wEAAwED,EAAQE,uBAChG,SADIC,EAAAC,OACWC,sBAAtBN,EAAOI,EAAAC,OAEPE,EAAWC,KAAKC,MAAMT,EAAKU,MAAMC,IACjCC,EAAWL,EAASM,OAASlB,EAAaY,EAAWA,EAASO,MAAM,EAAGnB,GAC7ED,EAAYkB,EAASG,IAAI,SAAAC,GAAK,UAAIA,EAAEH,OAAM,KAAKG,EAAEC,yBAO7CC,CAAUlB,EAAK,IAEE,YAAZA,EAAK,KAvBSD,EAyBDL,EAxBHE,KACRuB,YAAYpB","file":"1fc61174a601434ec92f.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1fc61174a601434ec92f","function postLettersResult(msg: string[]) {\r\n    const workaround = self as any;\r\n    workaround.postMessage(msg);\r\n}\r\n\r\nlet bestWords: string[] = ['Got no', 'response'];\r\nconst numResults = 3;\r\n\r\nasync function findWords(letters: string) {\r\n    const response = await fetch(`https://cors-proxy.htmldriven.com/?url=http://www.anagramica.com/all/${letters.toLowerCase()}`);\r\n    const data = await response.json();\r\n    \r\n    const allWords = JSON.parse(data.body).all as string[];\r\n    const useWords = allWords.length < numResults ? allWords : allWords.slice(0, numResults);\r\n    bestWords = useWords.map(w => `(${w.length}) ${w.toUpperCase()}`);\r\n}\r\n\r\nself.onmessage = e => {\r\n    const data = e.data as [string, string];\r\n\r\n    if (data[0] === 'calculate') {\r\n        findWords(data[1]);\r\n    }\r\n    else if (data[0] === 'respond') {\r\n        // a result is needed NOW\r\n        postLettersResult(bestWords);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/LettersWorker.ts"],"sourceRoot":""}